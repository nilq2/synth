exp := e:@exp_comma
	:e

// left->right
!exp_comma := l:exp_assign r:exp_comma_r
	( @r(:l) )
!exp_comma := e:exp_assign
	:e

!exp_comma_r(l) := , r:exp_assign n:exp_comma_r
	@n(:l , :r)
!exp_comma_r(l) := , r:exp_assign
	:l , :r


// right->left
!exp_assign := l:term = r:exp_assign
	set(:l, :r)
!exp_assign := l:term += r:exp_assign
	set(:l, add(:l, :r))
!exp_assign := l:term -= r:exp_assign
	set(:l, sub(:l, :r))
!exp_assign := l:term *= r:exp_assign
	set(:l, mul(:l, :r))
!exp_assign := l:term /= r:exp_assign
	set(:l, div(:l, :r))
!exp_assign := l:term %= r:exp_assign
	set(:l, mod(:l, :r))
!exp_assign := l:term >>= r:exp_assign
	set(:l, bsr(:l, :r))
!exp_assign := l:term <<= r:exp_assign
	set(:l, bsl(:l, :r))
!exp_assign := l:term &= r:exp_assign
	set(:l, band(:l, :r))
!exp_assign := l:term |= r:exp_assign
	set(:l, bor(:l, :r))
!exp_assign := l:term ^= r:exp_assign
	set(:l, bxor(:l, :r))
!exp_assign := e:exp_or
	:e


// left->right
!exp_or := l:exp_and r:exp_or_r
	@r(:l)
!exp_or := e:exp_and
	:e

!exp_or_r(l) := or r:exp_and n:exp_or_r
	@n(or(:l, :r))
!exp_or_r(l) := or r:exp_and
	or(:l, :r)


!exp_and := l:exp_bor r:exp_and_r
	@r(:l)
!exp_and := e:exp_bor
	:e

!exp_and_r(l) := and r:exp_bor n:exp_and_r
	@n(and(:l, :r))
!exp_and_r(l) := and r:exp_bor
	and(:l, :r)


!exp_bor := l:exp_bxor r:exp_bor_r
	@r(:l)
!exp_bor := e:exp_bxor
	:e

!exp_bor_r(l) := | r:exp_bxor n:exp_bor_r
	@n(bor(:l, :r))
!exp_bor_r(l) := | r:exp_bxor
	bor(:l, :r)


!exp_bxor := l:exp_band r:exp_bxor_r
	@r(:l)
!exp_bxor := l:exp_band
	:l

!exp_bxor_r(l) := ^ r:exp_band n:exp_bxor_r
	@n(bxor(:l, :r))
!exp_bxor_r(l) := ^ r:exp_band
	bxor(:l, :r)


!exp_band := l:exp_eq r:exp_band_r
	@r(:l)
!exp_band := e:exp_eq
	:e

!exp_band_r(l) := & r:exp_eq n:exp_band_r
	@n(band(:l, :r))
!exp_band_r(l) := & r:exp_eq
	band(:l, :r)


!exp_eq := l:exp_cmp r:exp_eq_r
	@l(:r)
!exp_eq := e:exp_cmp
	:e

!exp_eq_r(l) := == r:exp_cmp n:exp_eq_r
	@n(eq(:l, :r))
!exp_eq_r(l) := == r:exp_cmp
	eq(:l, :r)
!exp_eq_r(l) := != r:exp_cmp n:exp_eq_r
	@n(ne(:l, :r))
!exp_eq_r(l) := != r:exp_cmp
	ne(:l, :r)


!exp_cmp := l:exp_bshift r:exp_cmp_r
	@r(:l)
!exp_cmp := l:exp_bshift
	:l

!exp_cmp_r(l) := > r:exp_bshift n:exp_cmp_r
	@n(gr(:l, :r))
!exp_cmp_r(l) := > r:exp_bshift
	gr(:l, :r)
!exp_cmp_r(l) := < r:exp_bshift n:exp_cmp_r
	@n(lt(:l, :r))
!exp_cmp_r(l) := > r:exp_bshift
	lt(:l, :r)
!exp_cmp_r(l) := >= r:exp_bshift n:exp_cmp_r
	@n(ge(:l, :r))
!exp_cmp_r(l) := > r:exp_bshift
	ge(:l, :r)
!exp_cmp_r(l) := <= r:exp_bshift n:exp_cmp_r
	@n(le(:l, :r))
!exp_cmp_r(l) := < r:exp_bshift
	le(:l, :r)


!exp_bshift := l:exp_add r:exp_bshift_r
	@r(:l)
!exp_bshift := e:exp_add
	:l

!exp_bshift_r(l) := >> r:exp_add n:exp_bshift_r
	@n(bsr(:l, :r))
!exp_bshift_r(l) := >> r:exp_add
	bsr(:l, :r)
!exp_bshift_r(l) := << r:exp_add n:exp_bshift_r
	@n(bsl(:l, :r))
!exp_bshift_r(l) := << r:exp_add
	bsl(:l, :r)


!exp_add := l:exp_mul r:exp_add_r
	@r(:l)
!exp_add := e:exp_mul
	:e

!exp_add_r(l) := + r:exp_mul n:exp_add_r
	@n(add(:l, :r))
!exp_add_r(l) := + r:exp_mul
	add(:l, :r)
!exp_add_r(l) := - r:exp_mul n:exp_add_r
	@n(sub(:l, :r))
!exp_add_r(l) := - r:exp_mul
	sub(:l, :r)


!exp_mul := l:exp_unary r:exp_mul_r
	@r(:l)
!exp_mul := e:exp_unary
	:e

!exp_mul_r(l) := * r:exp_unary n:exp_mul_r
	@n(mul(:l, :r))
!exp_mul_r(l) := * r:exp_unary
	mul(:l, :r)
!exp_mul_r(l) := / r:exp_unary n:exp_mul_r
	@n(div(:l, :r))
!exp_mul_r(l) := / r:exp_unary
	div(:l, :r)
!exp_mul_r(l) := % r:exp_unary n:exp_mul_r
	@n(mod(:l, :r))
!exp_mul_r(l) := % r:exp_unary
	mod(:l, :r)


// right->left
!exp_unary := - l:exp_cast
	neg(:l)
!exp_unary := ~ l:exp_cast
	bnot(:l)
!exp_unary := @ l:exp_cast
	address(:l)
!exp_unary := not l:exp_cast
	not(:l)
!exp_unary := l:exp_cast
	:l


// left->right
!exp_cast := l:exp_index \: type:WORD
	(:l).(:type)()


!exp_index := [ e:exp ]
	index(:e, 0)
!exp_index := [ e:exp, i:exp ]
	index(:e, :i)
!exp_index := e:exp_member
	:e

!exp_member := l:term r:exp_member_r
	@r(:l)
!exp_member := r:exp_member_r
	@r(self)
!exp_member := e:term
	:e
!exp_member_r(l) := . r:term n:exp_member_r
	@n(:l.:r)
!exp_member_r(l) := . r:term
	:l.:r


!term := t:WORD
	:t
!term := t:INTEGER
	:t
!term := t:FLOAT
	:t
!term := t:STRING
	:t
!term := ( t:term )
	( :t )
